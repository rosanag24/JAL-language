/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import static code.Tokens.*;

import code.Tokens;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Analizadores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\4\1\6\1\6\1\5\22\0\1\10\1\63\1\2"+
    "\3\0\1\57\1\64\1\43\1\44\1\55\1\53\1\11\1\54\1\47"+
    "\1\50\12\7\1\46\1\45\1\62\1\61\1\60\2\0\5\1\1\52"+
    "\15\1\1\51\6\1\1\41\1\3\1\42\1\56\1\1\1\0\1\12"+
    "\1\20\1\24\1\34\1\21\1\23\1\27\1\15\1\30\1\1\1\36"+
    "\1\13\1\16\1\31\1\14\1\32\1\1\1\17\1\26\1\22\1\25"+
    "\1\35\1\1\1\33\2\1\1\37\1\0\1\40\7\0\1\6\u1fa2\0"+
    "\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\16\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\2\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\1\1\0\1\31\2\0"+
    "\1\5\5\2\1\32\16\2\1\33\1\34\3\2\1\4"+
    "\2\2\1\35\1\36\1\37\1\40\1\41\1\42\1\0"+
    "\2\43\2\2\1\44\2\2\1\45\15\2\1\46\1\47"+
    "\4\2\1\50\5\2\1\51\1\52\5\2\1\53\6\2"+
    "\1\54\10\2\1\55\1\56\7\2\1\57\1\2\1\60"+
    "\5\2\1\61\1\62\1\63\3\2\1\64\3\2\1\65"+
    "\1\66\1\67\1\70\1\2\1\71\4\2\1\72\1\73"+
    "\3\2\1\74\1\2\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\65"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\65\0\65\0\65\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\237\0\65\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\152\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\152\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\u0c37\0\u066b\0\u06a0\0\u0c6c\0\u0ca1"+
    "\0\152\0\u0cd6\0\u0d0b\0\152\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\152\0\152\0\u0ff1\0\u1026\0\u105b\0\u1090\0\65"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\152\0\152\0\u11ce"+
    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\152\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\152\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\152\0\152\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\152\0\u1730\0\152"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\152\0\152\0\152"+
    "\0\u186e\0\u18a3\0\u18d8\0\152\0\u190d\0\u1942\0\u1977\0\152"+
    "\0\152\0\152\0\152\0\u19ac\0\152\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\152\0\152\0\u1ab5\0\u1aea\0\u1b1f\0\152\0\u1b54"+
    "\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\0\1\7"+
    "\1\6\1\10\1\11\1\3\1\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\3\1\17\1\20\1\3\1\21\1\22"+
    "\1\23\1\24\1\25\1\3\1\26\2\3\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\66\0\1\3\5\0\1\3"+
    "\2\0\25\3\12\0\2\3\12\0\2\55\1\56\1\57"+
    "\61\55\5\0\1\6\2\0\1\6\54\0\4\60\3\0"+
    "\1\61\55\60\1\0\1\3\5\0\1\3\2\0\1\3"+
    "\1\62\4\3\1\63\10\3\1\64\1\65\2\3\1\66"+
    "\1\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\5\3\1\67\17\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\2\3\1\70\22\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\7\3\1\71\15\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\2\3\1\72"+
    "\22\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\1\3\1\73\4\3\1\74\12\3\1\75\3\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\1\3\1\76"+
    "\1\77\13\3\1\100\6\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\3\3\1\101\21\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\1\102\7\3\1\103"+
    "\14\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\7\3\1\104\6\3\1\105\6\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\11\3\1\106\5\3\1\107"+
    "\5\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\2\3\1\110\22\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\2\3\1\111\22\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\2\3\1\112\22\3\12\0"+
    "\2\3\62\0\1\113\15\0\1\3\5\0\1\3\2\0"+
    "\5\3\1\114\17\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\1\115\24\3\12\0\2\3\65\0\1\116"+
    "\65\0\1\117\71\0\1\120\64\0\1\121\64\0\1\122"+
    "\64\0\1\123\3\0\4\124\3\0\56\124\4\55\3\0"+
    "\56\55\7\0\1\125\55\0\4\60\3\0\1\126\55\60"+
    "\1\0\1\3\5\0\1\3\2\0\2\3\1\127\22\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\7\3"+
    "\1\130\15\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\22\3\1\131\2\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\1\132\24\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\1\133\24\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\22\3\1\134\2\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\22\3"+
    "\1\135\2\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\2\3\1\136\22\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\14\3\1\137\10\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\13\3\1\140\11\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\1\141"+
    "\24\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\2\3\1\142\22\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\12\3\1\143\12\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\17\3\1\144\5\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\1\145\24\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\1\3"+
    "\1\146\23\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\5\3\1\147\17\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\4\3\1\150\20\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\5\3\1\151\17\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\10\3"+
    "\1\152\14\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\10\3\1\153\14\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\16\3\1\154\6\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\13\3\1\155\11\3"+
    "\12\0\2\3\12\0\4\113\3\0\56\113\1\0\1\3"+
    "\5\0\1\3\2\0\13\3\1\156\11\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\1\3\1\157\23\3"+
    "\12\0\2\3\76\0\1\160\1\0\1\3\5\0\1\3"+
    "\2\0\3\3\1\161\21\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\5\3\1\162\17\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\5\3\1\163\17\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\22\3"+
    "\1\164\2\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\16\3\1\165\6\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\1\3\1\166\23\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\7\3\1\167\15\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\6\3"+
    "\1\170\16\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\4\3\1\171\20\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\1\172\24\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\13\3\1\173\11\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\16\3\1\174"+
    "\6\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\5\3\1\175\17\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\10\3\1\176\14\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\16\3\1\177\6\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\16\3\1\200"+
    "\6\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\1\201\24\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\17\3\1\202\5\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\6\3\1\203\16\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\7\3\1\204\15\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\14\3"+
    "\1\205\10\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\2\3\1\206\22\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\10\3\1\207\14\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\7\3\1\210\15\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\1\211"+
    "\24\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\10\3\1\212\14\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\1\3\1\213\23\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\16\3\1\214\6\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\10\3\1\215"+
    "\14\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\14\3\1\216\10\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\10\3\1\217\14\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\13\3\1\220\11\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\17\3\1\221"+
    "\5\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\17\3\1\222\5\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\10\3\1\223\14\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\10\3\1\224\14\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\1\3\1\225"+
    "\23\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\7\3\1\226\15\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\4\3\1\227\20\3\12\0\2\3\13\0"+
    "\1\3\5\0\1\3\2\0\2\3\1\230\22\3\12\0"+
    "\2\3\13\0\1\3\5\0\1\3\2\0\12\3\1\231"+
    "\12\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\24\3\1\232\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\13\3\1\233\11\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\16\3\1\234\6\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\17\3\1\235\5\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\7\3"+
    "\1\236\15\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\14\3\1\237\10\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\15\3\1\240\7\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\16\3\1\241\6\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\16\3"+
    "\1\242\6\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\7\3\1\243\15\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\7\3\1\244\15\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\2\3\1\245\22\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\16\3"+
    "\1\246\6\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\7\3\1\247\15\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\14\3\1\250\10\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\2\3\1\251\22\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\2\3"+
    "\1\252\22\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\2\3\1\253\22\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\7\3\1\254\15\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\5\3\1\255\17\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\5\3"+
    "\1\256\17\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\13\3\1\257\11\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\22\3\1\260\2\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\4\3\1\261\20\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\1\262"+
    "\24\3\12\0\2\3\13\0\1\3\5\0\1\3\2\0"+
    "\4\3\1\263\20\3\12\0\2\3\13\0\1\3\5\0"+
    "\1\3\2\0\1\264\24\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\20\3\1\265\4\3\12\0\2\3"+
    "\13\0\1\3\5\0\1\3\2\0\23\3\1\266\1\3"+
    "\12\0\2\3\13\0\1\3\5\0\1\3\2\0\2\3"+
    "\1\267\22\3\12\0\2\3\13\0\1\3\5\0\1\3"+
    "\2\0\5\3\1\270\17\3\12\0\2\3\13\0\1\3"+
    "\5\0\1\3\2\0\1\271\24\3\12\0\2\3\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7049];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\1\11\16\1\11\11"+
    "\5\1\3\11\5\1\1\0\1\11\2\0\35\1\6\11"+
    "\1\0\33\1\1\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return InvalidToken;
            } 
            // fall through
          case 62: break;
          case 2: 
            { lexeme=yytext(); return Id;
            } 
            // fall through
          case 63: break;
          case 3: 
            { lexeme=yytext(); return NewLine;
            } 
            // fall through
          case 64: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 65: break;
          case 5: 
            { lexeme=yytext(); return Int;
            } 
            // fall through
          case 66: break;
          case 6: 
            { lexeme=yytext(); return Comma;
            } 
            // fall through
          case 67: break;
          case 7: 
            { lexeme=yytext(); return Opencurl;
            } 
            // fall through
          case 68: break;
          case 8: 
            { lexeme=yytext(); return Closecurl;
            } 
            // fall through
          case 69: break;
          case 9: 
            { lexeme=yytext(); return Openbracket;
            } 
            // fall through
          case 70: break;
          case 10: 
            { lexeme=yytext(); return Closebracket;
            } 
            // fall through
          case 71: break;
          case 11: 
            { lexeme=yytext(); return Openparent;
            } 
            // fall through
          case 72: break;
          case 12: 
            { lexeme=yytext(); return Closeparent;
            } 
            // fall through
          case 73: break;
          case 13: 
            { lexeme=yytext(); return Semicolon;
            } 
            // fall through
          case 74: break;
          case 14: 
            { lexeme=yytext(); return Colon;
            } 
            // fall through
          case 75: break;
          case 15: 
            { lexeme=yytext(); return Dot;
            } 
            // fall through
          case 76: break;
          case 16: 
            { lexeme=yytext(); return Div;
            } 
            // fall through
          case 77: break;
          case 17: 
            { lexeme=yytext(); return Plus;
            } 
            // fall through
          case 78: break;
          case 18: 
            { lexeme=yytext(); return Minus;
            } 
            // fall through
          case 79: break;
          case 19: 
            { lexeme=yytext(); return Mult;
            } 
            // fall through
          case 80: break;
          case 20: 
            { lexeme=yytext(); return Pow;
            } 
            // fall through
          case 81: break;
          case 21: 
            { lexeme=yytext(); return Andperseand;
            } 
            // fall through
          case 82: break;
          case 22: 
            { lexeme=yytext(); return Greater;
            } 
            // fall through
          case 83: break;
          case 23: 
            { lexeme=yytext(); return Equal;
            } 
            // fall through
          case 84: break;
          case 24: 
            { lexeme=yytext(); return Less;
            } 
            // fall through
          case 85: break;
          case 25: 
            { lexeme=yytext(); return String;
            } 
            // fall through
          case 86: break;
          case 26: 
            { lexeme=yytext(); return Or;
            } 
            // fall through
          case 87: break;
          case 27: 
            { lexeme=yytext(); return If;
            } 
            // fall through
          case 88: break;
          case 28: 
            { lexeme=yytext(); return In;
            } 
            // fall through
          case 89: break;
          case 29: 
            { lexeme=yytext(); return Autoplus;
            } 
            // fall through
          case 90: break;
          case 30: 
            { lexeme=yytext(); return Autominus;
            } 
            // fall through
          case 91: break;
          case 31: 
            { lexeme=yytext(); return Greaterequal;
            } 
            // fall through
          case 92: break;
          case 32: 
            { lexeme=yytext(); return Equalto;
            } 
            // fall through
          case 93: break;
          case 33: 
            { lexeme=yytext(); return Lessequal;
            } 
            // fall through
          case 94: break;
          case 34: 
            { lexeme=yytext(); return Differentto;
            } 
            // fall through
          case 95: break;
          case 35: 
            { lexeme=yytext(); return Float;
            } 
            // fall through
          case 96: break;
          case 36: 
            { lexeme=yytext(); return And;
            } 
            // fall through
          case 97: break;
          case 37: 
            { lexeme=yytext(); return Mod;
            } 
            // fall through
          case 98: break;
          case 38: 
            { lexeme=yytext(); return Typeint;
            } 
            // fall through
          case 99: break;
          case 39: 
            { lexeme=yytext(); return Not;
            } 
            // fall through
          case 100: break;
          case 40: 
            { lexeme=yytext(); return Char;
            } 
            // fall through
          case 101: break;
          case 41: 
            { lexeme=yytext(); return Typeboolean;
            } 
            // fall through
          case 102: break;
          case 42: 
            { lexeme=yytext(); return Else;
            } 
            // fall through
          case 103: break;
          case 43: 
            { lexeme=yytext(); return Typechar;
            } 
            // fall through
          case 104: break;
          case 44: 
            { lexeme=yytext(); return True;
            } 
            // fall through
          case 105: break;
          case 45: 
            { lexeme=yytext(); return Typefloat;
            } 
            // fall through
          case 106: break;
          case 46: 
            { lexeme=yytext(); return Focus;
            } 
            // fall through
          case 107: break;
          case 47: 
            { lexeme=yytext(); return False;
            } 
            // fall through
          case 108: break;
          case 48: 
            { lexeme=yytext(); return Aberto;
            } 
            // fall through
          case 109: break;
          case 49: 
            { lexeme=yytext(); return Finite;
            } 
            // fall through
          case 110: break;
          case 50: 
            { lexeme=yytext(); return Saltus;
            } 
            // fall through
          case 111: break;
          case 51: 
            { lexeme=yytext(); return Typestring;
            } 
            // fall through
          case 112: break;
          case 52: 
            { lexeme=yytext(); return Typedouble;
            } 
            // fall through
          case 113: break;
          case 53: 
            { lexeme=yytext(); return Reditus;
            } 
            // fall through
          case 114: break;
          case 54: 
            { lexeme=yytext(); return Typeebublio;
            } 
            // fall through
          case 115: break;
          case 55: 
            { lexeme=yytext(); return Examino;
            } 
            // fall through
          case 116: break;
          case 56: 
            { lexeme=yytext(); return Geminio;
            } 
            // fall through
          case 117: break;
          case 57: 
            { lexeme=yytext(); return Typepointer;
            } 
            // fall through
          case 118: break;
          case 58: 
            { lexeme=yytext(); return Alohomora;
            } 
            // fall through
          case 119: break;
          case 59: 
            { lexeme=yytext(); return Aparecium;
            } 
            // fall through
          case 120: break;
          case 60: 
            { lexeme=yytext(); return Giratiempo;
            } 
            // fall through
          case 121: break;
          case 61: 
            { lexeme=yytext(); return Avadakedavra;
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
