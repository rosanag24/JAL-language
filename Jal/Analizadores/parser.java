package Analizadores;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\023\010\000\002\023\002\000\002\012\004" +
    "\000\002\012\005\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\025\010\000\002\026" +
    "\005\000\002\026\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\024\005\000\002\024\007\000\002\027\004" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\005\000\002" +
    "\027\004\000\002\027\003\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\005\000\002\027\005" +
    "\000\002\027\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\010\000" +
    "\002\030\003\000\002\030\004\000\002\021\007\000\002" +
    "\021\007\000\002\021\007\000\002\021\007\000\002\015" +
    "\006\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\004\004\000\002" +
    "\016\005\000\002\016\003\000\002\022\005\000\002\032" +
    "\012\000\002\032\013\000\002\032\006\000\002\032\006" +
    "\000\002\032\006\000\002\032\006\000\002\032\006\000" +
    "\002\032\006\000\002\005\012\000\002\006\016\000\002" +
    "\007\011\000\002\017\024\000\002\010\003\000\002\010" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\006\005\001\002\000\004\002\000\001" +
    "\002\000\004\033\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\041\011\001\002\000" +
    "\004\023\012\001\002\000\032\007\040\011\037\012\031" +
    "\014\015\015\041\017\030\020\032\025\016\032\ufffd\040" +
    "\034\041\026\047\013\001\002\000\004\023\347\001\002" +
    "\000\004\032\346\001\002\000\004\027\331\001\002\000" +
    "\022\035\305\036\306\037\304\043\313\044\311\045\307" +
    "\046\314\047\310\001\002\000\034\007\uffde\011\uffde\012" +
    "\uffde\014\uffde\015\uffde\017\uffde\020\uffde\024\uffde\025\uffde" +
    "\032\uffde\040\uffde\041\uffde\047\uffde\001\002\000\034\007" +
    "\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf" +
    "\024\uffdf\025\uffdf\032\uffdf\040\uffdf\041\uffdf\047\uffdf\001" +
    "\002\000\004\032\303\001\002\000\004\024\302\001\002" +
    "\000\004\032\301\001\002\000\034\007\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\024\uffe1\025\uffe1" +
    "\032\uffe1\040\uffe1\041\uffe1\047\uffe1\001\002\000\034\007" +
    "\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0" +
    "\024\uffe0\025\uffe0\032\uffe0\040\uffe0\041\uffe0\047\uffe0\001" +
    "\002\000\034\007\uffda\011\uffda\012\uffda\014\uffda\015\uffda" +
    "\017\uffda\020\uffda\024\uffda\025\uffda\032\uffda\040\uffda\041" +
    "\uffda\047\uffda\001\002\000\004\032\300\001\002\000\004" +
    "\032\277\001\002\000\004\032\276\001\002\000\004\027" +
    "\263\001\002\000\004\032\262\001\002\000\014\025\214" +
    "\027\247\050\251\051\250\072\246\001\002\000\004\072" +
    "\174\001\002\000\034\007\040\011\037\012\031\014\015" +
    "\015\041\017\030\020\032\024\uffb7\025\016\032\ufffd\040" +
    "\034\041\026\047\013\001\002\000\004\027\165\001\002" +
    "\000\004\027\144\001\002\000\032\004\056\027\052\032" +
    "\uff98\040\050\042\054\053\046\060\047\061\051\073\053" +
    "\074\045\075\057\076\055\001\002\000\004\032\043\001" +
    "\002\000\004\032\044\001\002\000\034\007\uffdc\011\uffdc" +
    "\012\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\024\uffdc\025" +
    "\uffdc\032\uffdc\040\uffdc\041\uffdc\047\uffdc\001\002\000\046" +
    "\030\uffd2\032\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\004\040\142\001\002\000\050\030\uffd3\032\uffd3\034\122" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\070\uffd3\071\uffd3\001\002\000\030\004\056\027" +
    "\052\040\050\042\054\053\046\060\047\061\051\073\053" +
    "\074\045\075\057\076\055\001\002\000\030\004\056\027" +
    "\052\040\050\042\054\053\046\060\047\061\051\073\053" +
    "\074\045\075\057\076\055\001\002\000\046\030\uffd0\032" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000\046\030\uffd1" +
    "\032\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\071\uffd1\001\002\000\046\030" +
    "\uffcd\032\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\001\002\000\046" +
    "\030\uffcf\032\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\001\002\000" +
    "\046\030\uffce\032\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\062\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\001\002" +
    "\000\044\032\uff97\050\067\051\070\052\100\053\062\054" +
    "\076\055\075\056\063\057\077\062\073\063\074\064\065" +
    "\065\066\066\072\067\064\070\061\071\071\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\046\030\uffc5\032\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002" +
    "\000\046\030\uffc4\032\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\030\004\056\027\052\040\050\042\054\053\046" +
    "\060\047\061\051\073\053\074\045\075\057\076\055\001" +
    "\002\000\046\030\uffcb\032\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\076\055\075\056\063\057\077\062\073\063" +
    "\074\064\065\065\066\066\072\067\064\070\061\071\071" +
    "\001\002\000\046\030\uffc9\032\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\075\056\uffc9\057\uffc9\062\073" +
    "\063\074\064\065\065\066\066\072\067\064\070\061\071" +
    "\071\001\002\000\046\030\uffc8\032\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\075\056\uffc8\057\uffc8\062" +
    "\073\063\074\064\065\065\066\066\072\067\064\070\061" +
    "\071\071\001\002\000\046\030\uffc6\032\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\075\056\uffc6\057\uffc6" +
    "\062\073\063\074\064\065\065\066\066\072\067\064\070" +
    "\061\071\071\001\002\000\046\030\uffc2\032\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\062\uffc2\063\uffc2\064\065\065\066\066\072\067\064" +
    "\070\061\071\071\001\002\000\046\030\uffc3\032\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\062\uffc3\063\uffc3\064\065\065\066\066\072\067" +
    "\064\070\061\071\071\001\002\000\046\030\uffc0\032\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\062\uffc0\063\uffc0\064\065\065\066\066\072" +
    "\067\064\070\061\071\071\001\002\000\046\030\uffbc\032" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\070\061\071\071\001\002\000\046\030\uffbf" +
    "\032\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\062\uffbf\063\uffbf\064\065\065\066" +
    "\066\072\067\064\070\061\071\071\001\002\000\046\030" +
    "\uffbe\032\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064\065\065" +
    "\066\066\072\067\064\070\061\071\071\001\002\000\046" +
    "\030\uffc1\032\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\062\uffc1\063\uffc1\064\065" +
    "\065\066\066\072\067\064\070\061\071\071\001\002\000" +
    "\046\030\uffc7\032\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\075\056\uffc7\057\uffc7\062\073\063\074\064" +
    "\065\065\066\066\072\067\064\070\061\071\071\001\002" +
    "\000\046\030\uffca\032\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\076\055\075\056\063\057\077\062\073\063\074" +
    "\064\065\065\066\066\072\067\064\070\061\071\071\001" +
    "\002\000\046\030\uffbd\032\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\061\071\071" +
    "\001\002\000\044\030\120\050\067\051\070\052\100\053" +
    "\062\054\076\055\075\056\063\057\077\062\073\063\074" +
    "\064\065\065\066\066\072\067\064\070\061\071\071\001" +
    "\002\000\046\030\uffcc\032\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\001\002\000\046\030\uffbb\032\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\001\002\000\004\040\123\001\002\000\004\027\124" +
    "\001\002\000\014\025\132\040\125\042\130\073\126\074" +
    "\127\001\002\000\022\025\ufff5\026\ufff5\030\ufff5\031\ufff5" +
    "\040\ufff5\042\ufff5\073\ufff5\074\ufff5\001\002\000\022\025" +
    "\ufff6\026\ufff6\030\ufff6\031\ufff6\040\ufff6\042\ufff6\073\ufff6" +
    "\074\ufff6\001\002\000\022\025\ufff7\026\ufff7\030\ufff7\031" +
    "\ufff7\040\ufff7\042\ufff7\073\ufff7\074\ufff7\001\002\000\022" +
    "\025\ufff8\026\ufff8\030\ufff8\031\ufff8\040\ufff8\042\ufff8\073" +
    "\ufff8\074\ufff8\001\002\000\004\030\141\001\002\000\016" +
    "\025\132\026\136\040\125\042\130\073\126\074\127\001" +
    "\002\000\020\025\132\026\ufff9\030\ufff9\040\125\042\130" +
    "\073\126\074\127\001\002\000\022\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\040\ufff4\042\ufff4\073\ufff4\074\ufff4\001\002" +
    "\000\006\026\ufffa\030\ufffa\001\002\000\032\025\ufffc\026" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\040\ufffc\042\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\073\ufffc\074\ufffc\001\002\000\004\026" +
    "\140\001\002\000\032\025\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\040\ufffb\042\ufffb\052\ufffb\053\ufffb\054\ufffb\073" +
    "\ufffb\074\ufffb\001\002\000\046\030\uffb8\032\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\071\uffb8\001\002\000\046\030\uffb9\032\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\001\002\000\046\030\uffba\032\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\076\055\075\056" +
    "\063\057\077\062\073\063\074\064\065\065\066\066\072" +
    "\067\064\070\061\071\071\001\002\000\004\040\145\001" +
    "\002\000\004\022\146\001\002\000\004\040\147\001\002" +
    "\000\004\030\150\001\002\000\004\023\151\001\002\000" +
    "\032\007\040\011\037\012\031\014\015\015\041\017\030" +
    "\020\032\025\016\032\ufffd\040\034\041\026\047\013\001" +
    "\002\000\004\024\153\001\002\000\004\007\154\001\002" +
    "\000\004\027\155\001\002\000\004\040\156\001\002\000" +
    "\004\022\157\001\002\000\004\025\132\001\002\000\004" +
    "\030\161\001\002\000\004\023\162\001\002\000\032\007" +
    "\040\011\037\012\031\014\015\015\041\017\030\020\032" +
    "\025\016\032\ufffd\040\034\041\026\047\013\001\002\000" +
    "\004\024\164\001\002\000\034\007\uff99\011\uff99\012\uff99" +
    "\014\uff99\015\uff99\017\uff99\020\uff99\024\uff99\025\uff99\032" +
    "\uff99\040\uff99\041\uff99\047\uff99\001\002\000\030\004\056" +
    "\027\052\040\050\042\054\053\046\060\047\061\051\073" +
    "\053\074\045\075\057\076\055\001\002\000\044\030\167" +
    "\050\067\051\070\052\100\053\062\054\076\055\075\056" +
    "\063\057\077\062\073\063\074\064\065\065\066\066\072" +
    "\067\064\070\061\071\071\001\002\000\004\023\170\001" +
    "\002\000\032\007\040\011\037\012\031\014\015\015\041" +
    "\017\030\020\032\025\016\032\ufffd\040\034\041\026\047" +
    "\013\001\002\000\004\024\172\001\002\000\034\007\uff9a" +
    "\011\uff9a\012\uff9a\014\uff9a\015\uff9a\017\uff9a\020\uff9a\024" +
    "\uff9a\025\uff9a\032\uff9a\040\uff9a\041\uff9a\047\uff9a\001\002" +
    "\000\004\024\uffb6\001\002\000\016\004\204\025\132\040" +
    "\176\042\203\073\201\074\175\001\002\000\004\032\245" +
    "\001\002\000\014\025\214\032\240\052\241\053\236\054" +
    "\237\001\002\000\010\052\227\053\225\054\226\001\002" +
    "\000\004\032\224\001\002\000\004\032\223\001\002\000" +
    "\010\052\211\053\207\054\210\001\002\000\004\032\206" +
    "\001\002\000\004\032\205\001\002\000\004\032\uff9f\001" +
    "\002\000\004\032\uffa1\001\002\000\004\040\212\001\002" +
    "\000\004\040\212\001\002\000\004\040\212\001\002\000" +
    "\004\025\214\001\002\000\004\032\uffe7\001\002\000\004" +
    "\042\215\001\002\000\004\031\216\001\002\000\004\042" +
    "\217\001\002\000\004\026\220\001\002\000\014\032\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\072\ufff3\001\002\000\004\032" +
    "\uffe5\001\002\000\004\032\uffe6\001\002\000\004\032\uff9e" +
    "\001\002\000\004\032\uff9d\001\002\000\006\025\132\040" +
    "\234\001\002\000\006\025\132\040\232\001\002\000\006" +
    "\025\132\040\230\001\002\000\004\032\uffed\001\002\000" +
    "\004\032\ufff0\001\002\000\004\032\uffeb\001\002\000\004" +
    "\032\uffee\001\002\000\004\032\uffec\001\002\000\004\032" +
    "\uffef\001\002\000\004\025\132\001\002\000\004\025\132" +
    "\001\002\000\004\032\uffa2\001\002\000\004\025\132\001" +
    "\002\000\004\032\uffea\001\002\000\004\032\uffe8\001\002" +
    "\000\004\032\uffe9\001\002\000\004\032\uffa0\001\002\000" +
    "\030\004\056\027\052\040\050\042\054\053\046\060\047" +
    "\061\051\073\053\074\045\075\057\076\055\001\002\000" +
    "\014\025\132\040\125\042\130\073\126\074\127\001\002" +
    "\000\004\032\253\001\002\000\004\032\252\001\002\000" +
    "\034\007\uffd6\011\uffd6\012\uffd6\014\uffd6\015\uffd6\017\uffd6" +
    "\020\uffd6\024\uffd6\025\uffd6\032\uffd6\040\uffd6\041\uffd6\047" +
    "\uffd6\001\002\000\034\007\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\024\uffd5\025\uffd5\032\uffd5\040" +
    "\uffd5\041\uffd5\047\uffd5\001\002\000\004\030\260\001\002" +
    "\000\006\030\ufff1\031\256\001\002\000\014\025\132\040" +
    "\125\042\130\073\126\074\127\001\002\000\004\030\ufff2" +
    "\001\002\000\004\032\uffb1\001\002\000\044\032\uffa5\050" +
    "\067\051\070\052\100\053\062\054\076\055\075\056\063" +
    "\057\077\062\073\063\074\064\065\065\066\066\072\067" +
    "\064\070\061\071\071\001\002\000\034\007\uffd4\011\uffd4" +
    "\012\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4\024\uffd4\025" +
    "\uffd4\032\uffd4\040\uffd4\041\uffd4\047\uffd4\001\002\000\030" +
    "\004\056\027\052\040\050\042\054\053\046\060\047\061" +
    "\051\073\053\074\045\075\057\076\055\001\002\000\044" +
    "\030\265\050\067\051\070\052\100\053\062\054\076\055" +
    "\075\056\063\057\077\062\073\063\074\064\065\065\066" +
    "\066\072\067\064\070\061\071\071\001\002\000\004\023" +
    "\266\001\002\000\032\007\040\011\037\012\031\014\015" +
    "\015\041\017\030\020\032\025\016\032\ufffd\040\034\041" +
    "\026\047\013\001\002\000\004\024\270\001\002\000\004" +
    "\041\271\001\002\000\036\007\uff9c\011\uff9c\012\uff9c\014" +
    "\uff9c\015\uff9c\017\uff9c\020\uff9c\021\272\024\uff9c\025\uff9c" +
    "\032\uff9c\040\uff9c\041\uff9c\047\uff9c\001\002\000\004\023" +
    "\273\001\002\000\032\007\040\011\037\012\031\014\015" +
    "\015\041\017\030\020\032\025\016\032\ufffd\040\034\041" +
    "\026\047\013\001\002\000\004\024\275\001\002\000\034" +
    "\007\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b\017\uff9b\020" +
    "\uff9b\024\uff9b\025\uff9b\032\uff9b\040\uff9b\041\uff9b\047\uff9b" +
    "\001\002\000\034\007\uffd8\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\024\uffd8\025\uffd8\032\uffd8\040\uffd8" +
    "\041\uffd8\047\uffd8\001\002\000\034\007\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\024\uffd9\025\uffd9" +
    "\032\uffd9\040\uffd9\041\uffd9\047\uffd9\001\002\000\034\007" +
    "\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\024\uffe2\025\uffe2\032\uffe2\040\uffe2\041\uffe2\047\uffe2\001" +
    "\002\000\034\007\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\024\uffdb\025\uffdb\032\uffdb\040\uffdb\041" +
    "\uffdb\047\uffdb\001\002\000\004\002\uffff\001\002\000\034" +
    "\007\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\024\uffdd\025\uffdd\032\uffdd\040\uffdd\041\uffdd\047\uffdd" +
    "\001\002\000\010\024\uffae\031\uffae\042\uffae\001\002\000" +
    "\010\024\uffb0\031\uffb0\042\uffb0\001\002\000\010\024\uffaf" +
    "\031\uffaf\042\uffaf\001\002\000\010\024\uffab\031\uffab\042" +
    "\uffab\001\002\000\010\024\uffa9\031\uffa9\042\uffa9\001\002" +
    "\000\010\024\uffad\031\uffad\042\uffad\001\002\000\004\042" +
    "\315\001\002\000\010\024\uffac\031\uffac\042\uffac\001\002" +
    "\000\010\024\uffaa\031\uffaa\042\uffaa\001\002\000\006\026" +
    "\316\042\317\001\002\000\004\040\325\001\002\000\004" +
    "\026\320\001\002\000\004\040\321\001\002\000\004\072" +
    "\322\001\002\000\004\025\132\001\002\000\004\032\324" +
    "\001\002\000\004\032\uffa3\001\002\000\004\072\326\001" +
    "\002\000\004\025\132\001\002\000\004\032\330\001\002" +
    "\000\004\032\uffa4\001\002\000\012\004\334\040\332\042" +
    "\335\073\333\001\002\000\004\030\344\001\002\000\004" +
    "\030\342\001\002\000\004\030\340\001\002\000\004\030" +
    "\336\001\002\000\004\032\337\001\002\000\004\032\uffb2" +
    "\001\002\000\004\032\341\001\002\000\004\032\uffb5\001" +
    "\002\000\004\032\343\001\002\000\004\032\uffb3\001\002" +
    "\000\004\032\345\001\002\000\004\032\uffb4\001\002\000" +
    "\034\007\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\024\uffd7\025\uffd7\032\uffd7\040\uffd7\041\uffd7\047" +
    "\uffd7\001\002\000\004\040\350\001\002\000\004\033\361" +
    "\001\002\000\006\024\353\031\352\001\002\000\004\040" +
    "\356\001\002\000\004\041\354\001\002\000\006\032\ufffd" +
    "\047\013\001\002\000\004\032\ufffe\001\002\000\004\033" +
    "\357\001\002\000\022\035\305\036\306\037\304\043\313" +
    "\044\311\045\307\046\314\047\310\001\002\000\006\024" +
    "\uffe3\031\uffe3\001\002\000\022\035\305\036\306\037\304" +
    "\043\313\044\311\045\307\046\314\047\310\001\002\000" +
    "\006\024\uffe4\031\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\023\006" +
    "\024\007\017\010\041\015\020\017\016\021\022\022\026" +
    "\023\032\025\034\027\035\030\021\032\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\023\006\024\007\017\010\041\015\020\017\016" +
    "\021\022\022\026\023\032\025\034\027\035\030\172\032" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\120\001" +
    "\001\000\004\020\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\115\001\001\000\004" +
    "\020\114\001\001\000\004\020\113\001\001\000\004\020" +
    "\112\001\001\000\004\020\111\001\001\000\004\020\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\107\001\001\000\004\020\106\001\001\000\004\020\105" +
    "\001\001\000\004\020\104\001\001\000\004\020\103\001" +
    "\001\000\004\020\102\001\001\000\004\020\101\001\001" +
    "\000\004\020\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\133\013\130\014\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\133\013" +
    "\136\014\132\001\001\000\010\012\133\013\134\014\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\023\006\024\007\017\010\041\015" +
    "\020\017\016\021\022\022\026\023\032\025\034\027\035" +
    "\030\151\032\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\023\006\024\007\017\010\041\015\020" +
    "\017\016\021\022\022\026\023\032\025\034\027\035\030" +
    "\162\032\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\023\006\024\007\017\010\041\015\020" +
    "\017\016\021\022\022\026\023\032\025\034\027\035\030" +
    "\170\032\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\176\025\201\031\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\221\001\001\000\004\025\220\001" +
    "\001\000\004\025\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\234\001\001\000\004\012\232\001\001\000\004" +
    "\012\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\243\001\001\000\004\012\242\001" +
    "\001\000\002\001\001\000\004\012\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\260\001\001\000\010\012\133\014\254" +
    "\026\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\133\014\254\026\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\023\006\024\007\017\010\041" +
    "\015\020\017\016\021\022\022\026\023\032\025\034\027" +
    "\035\030\266\032\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\023\006\024\007\017\010\041\015\020\017\016\021\022" +
    "\022\026\023\032\025\034\027\035\030\273\032\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\357\001\001\000\002" +
    "\001\001\000\004\011\361\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= MAIN 
            {
              Object RESULT =null;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= Aberto Colon NewLine Opencurl SENTENCIA Closecurl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STRUCTURE ::= Typeebublio Opencurl SIMBOLOS Closecurl NewLine STRUCTURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTURE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRUCTURE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTURE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ARRAY ::= Openbracket Closebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARRAY ::= Openbracket SECUENCE Closebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SECUENCE ::= DATO SECUENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECUENCE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SECUENCE ::= DATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECUENCE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATO ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATO ::= Float 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATO ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATO ::= Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATO ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INDICE ::= Id Openbracket Int Comma Int Closebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA ::= DATO Comma LISTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA ::= DATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARITMETICA_ARRAY ::= ARRAY Plus ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARITMETICA_ARRAY ::= ARRAY Minus ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARITMETICA_ARRAY ::= ARRAY Mult ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARITMETICA_ARRAY ::= ARRAY Plus Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARITMETICA_ARRAY ::= ARRAY Minus Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARITMETICA_ARRAY ::= ARRAY Mult Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARITMETICA_ARRAY ::= Id Plus ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARITMETICA_ARRAY ::= Id Minus ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITMETICA_ARRAY ::= Id Mult ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITMETICA_ARRAY ::= INDICE Plus INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARITMETICA_ARRAY ::= INDICE Minus INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARITMETICA_ARRAY ::= INDICE Mult INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA_ARRAY",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIMBOLOS ::= Id Colon TDATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIMBOLOS ::= SIMBOLOS Comma Id Colon TDATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENT ::= ASIGNACION Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENT ::= IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENT ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENT ::= FOCUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STATEMENT ::= FUNCIONCALL Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STATEMENT ::= REDITUS Semicolon Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATEMENT ::= IMPRIMIR Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STATEMENT ::= NewLine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STATEMENT ::= Saltus Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STATEMENT ::= Finite Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STATEMENT ::= ASIGNACION_ARRAY Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STATEMENT ::= Id Autoplus Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STATEMENT ::= Id Autominus Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STATEMENT ::= STRUCTURE Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= Float 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= Int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= Char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= Str 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= True 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= False 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= Openparent EXPRESION Closeparent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION Plus EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION Minus EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION Mod EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION Mult EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION Div EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION Pow EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION Autoplus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION Autominus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION And EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION Or EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION Less EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION Greater EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION Lessequal EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION Greaterequal EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION Equalto EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION Differentto EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= Not EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= Minus EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= Andperseand Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= Id Dot Id Openparent SECUENCE Closeparent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= STATEMENT SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IMPRIMIR ::= Aparecium Openparent Str Closeparent Semicolon 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMPRIMIR ::= Aparecium Openparent Id Closeparent Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IMPRIMIR ::= Aparecium Openparent Char Closeparent Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IMPRIMIR ::= Aparecium Openparent Int Closeparent Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONCALL ::= Id Openparent LISTA Closeparent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONCALL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TDATO ::= Typechar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TDATO ::= Typeint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TDATO ::= Typestring 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TDATO ::= Typedouble 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TDATO ::= Typefloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TDATO ::= Typepointer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TDATO ::= Typeboolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TDATO ::= Typeebublio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TDATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= TDATO Id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION_LIST ::= DECLARACION Comma DECLARACION_LIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_LIST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNACION ::= Id Equal EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNACION_ARRAY ::= Openbracket TDATO Int Closebracket Id Equal ARRAY Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGNACION_ARRAY ::= Openbracket TDATO Int Int Closebracket Id Equal ARRAY Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGNACION_ARRAY ::= INDICE Equal Id Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION_ARRAY ::= INDICE Equal Int Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNACION_ARRAY ::= INDICE Equal Float Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION_ARRAY ::= INDICE Equal Str Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION_ARRAY ::= INDICE Equal Char Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION_ARRAY ::= INDICE Equal ARITMETICA_ARRAY Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= If Openparent EXPRESION Closeparent Opencurl SENTENCIA Closecurl NewLine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF_ELSE ::= If Openparent EXPRESION Closeparent Opencurl SENTENCIA Closecurl NewLine Else Opencurl SENTENCIA Closecurl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // WHILE ::= Giratiempo Openparent EXPRESION Closeparent Opencurl SENTENCIA Closecurl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FOCUS ::= Focus Openparent Id In Id Closeparent Opencurl SENTENCIA Closecurl Focus Openparent Id In ARRAY Closeparent Opencurl SENTENCIA Closecurl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOCUS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // REDITUS ::= Reditus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REDITUS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // REDITUS ::= Reditus EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REDITUS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
